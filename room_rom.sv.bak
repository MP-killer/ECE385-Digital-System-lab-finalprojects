module room_rom ( input [10:0]	addr,
						output[39:0] 	data
					 );
	parameter ADDR_WIDTH = 40;
   	parameter DATA_WIDTH =  11;			
	// ROM definition				
	parameter [0:2**ADDR_WIDTH-1][DATA_WIDTH-1:0] ROM = {
        40'b0000000000000000000000000000000000000000, // 0
	40'b0000001111111111111111111111111111000000, // 1
        40'b0000001000000000000110000000000001000000, // 2
        40'b0000001011110111110110111110111101000000, // 3
        40'b0000001011110111110110111110111101000000, // 4
        40'b0000001000000000000000000000000001000000, // 5
        40'b0000001011110110111111110110111101000000, // 6
        40'b0000001000000110000110000110000001000000, // 7
        40'b0000001111110111110110111110111111000000, // 8
        40'b0000000000010111110110111110100000000000, // 9
	40'b0000000000010110000000000110100000000000, // 10
	40'b0000000000010110111111110110100000000000, // 11
        40'b0000001111110110100000010110111111000000, // 12
        40'b0000001000000000100000010000000001000000, // 13
        40'b0000001111110110100000010110111111000000, // 14
        40'b0000000000010110111111110110100000000000, // 15
        40'b0000000000010110000000000110100000000000, // 16
        40'b0000000000010110111111110110100000000000, // 17
        40'b0000001111110110111111110110111111000000, // 18
        40'b0000001000000000000110000000000001000000, // 19
	40'b0000001011110111110110111110111101000000, // 20
	40'b0000001000110000000000000000110001000000, // 21
        40'b0000001110110110111111110110110111000000, // 22
        40'b0000001110110110111111110110110111000000, // 23
        40'b0000001000000110000110000110000001000000, // 24
        40'b0000001011111111110110111111111101000000, // 25
        40'b0000001011111111110110111111111101000000, // 26
        40'b0000001000000000000000000000000001000000, // 27
        40'b0000001111111111111111111111111111000000, // 28
        40'b0000000000000000000000000000000000000000, // 29

        };

	assign data = ROM[addr];

endmodule


  